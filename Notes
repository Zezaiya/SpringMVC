                                            SpringMVC
概述:与servlet技术功能等同,都属于web层开发技术,不过它可以极大简化前者的代码(表现层开发框架)
优点:开发简洁,灵活性强

准备环境:1.导入spring-webmvc坐标和servlet坐标
        2.创建SpringMVC控制类,并在该类上写上@Controller,代替servlet(里面可以定义方法,方法体内定义返回值,即返回给浏览器的内容)
        3.创建SpringMVC配置类加载需要的bean
        4.初始化Servlet容器,加载SpringMVC环境,设置SpringMVC技术处理的请求

总结:有许多配置只需要我们添加一次,后期需要我们做的事情很少

一次性工作:
         ->创建工程,设置tomcat服务器
         ->导入坐标
         ->创建ServletContainerInitConfig容器启动类以及里面重写的方法
         ->创建SpringMVC核心配置类(@Configure,@ComponentScan)

多次工作:
         ->创建对应需求的controller控制器
         ->在controller里编写需要的servlet(方法,在方法上写上对应的访问路径[@ResultMapping]和返回体类型[@ResponseBody])


启动服务器初始化过程
1.服务器启动，执行ServletContainersInitConfig类，初始化web容器
2.执行createServletApplicationContext方法，创建了webApplicationContext对象
3.加载SpringMvcConfig
4.执行@Componentscan加载对应的bean
5.加载UserController，每个@RequestMapping的名称对应一个具体的方法
6.执行getServletMappings方法，定义所有的请求都通过SpringMVC

单次请求过程
1.发送请求localhost/ save
2.web容器发现所有请求都经过SpringMVC，将请求交给SpringMVC处理
3.解析请求路径/save
4.由/save匹配执行对应的方法save(）
5.执行save(）
6.检测到有@ResponseBody直接将save()方法的返回值作为响应体返回给请求方

实际开发遇到的问题:SpringMVC所需要加载的包仅是controller,但是还有service和dao的包仍需要由Spring加载,如何不让Spring错误地加载到controller包?

解决方案:在SpringConfig配置类的包扫描器里排除controller这个包(或者精准到dao和service包)


1、DispatcherServlet是什么
DispatcherServlet是Spring MVC最核心的类，是前端控制器（Front Controller）设计模式的实现，正是这个核心组件接收所有传输到Web应用的HTTP请求。

2、DispatcherServlet的作用
把一个HTTP request交给它真正的处理方法
解析HTTP request的header和body中的数据，并把它们转换为DTO(数据传输对象)
Model-View-Controller三方的交互
再把业务逻辑返回的DTO转换成HTTP response
渲染具体的视图等
-------------------------------------------------------------------------------------------------------------------------
                                           请求路径映射
问题:当不同的controller里出现了相同的路径名时,程序无法运行(因为无法判断你想访问的是哪个servlet)
->解决方式:加上模块名

问题:如果在每一个servlet上面都加上模块名过于繁琐
->解决方式:在该controller类上main添加@ResultMapping()注解,表示该类的mapping均配上该前缀
-------------------------------------------------------------------------------------------------------------------------
                                          获取请求的请求参数
Get/Post请求:只需要在对应路径的servlet方法形参里写上需要获取的参数
   对于普通参数(英文数字)可以直接传入
   对于中文,需要在容器加载类里添加过滤器(重写过滤器方法)
如果传入的参数名和servlet方法的形参名不一致,会导致无法传入,这时我们需要在形参前添加@RequestParam("里面写上传入参数的名称"->映射)

->优化:其实我们可以创建一个实体类,在实体类中定义成员变量,将该实体类作为形式参数来接收数据

不同参数传入:
数组:我们将数组作为形式参数时,MVC会自动将请求内和形参数组名相同的值传入数组
集合:如果直接将集合作为形参,MVC会创造集合的对象(MVC对于引用类型参数时的处理方式,创建对象->set方法赋值),但集合不能创建对象,所以我们需要加上
    @RequestParam注解,表示将表里的数据作为值直接传入List集合

@RequestParam->GET请求    @RequestBody->POST请求
-------------------------------------------------------------------------------------------------------------------------
                                   对于企业开发,参数的传入一般是json格式
使用方法:1.导入坐标   2.在MVC核心配置类里加上@EnableWebMvc注释(功能很多),可以实现由Json格式转化为对应类型参数   3.使用@RequestBody注解即可

注意:一般来说,现在都用json传参,所以@RequestBody使用较多,对于@RequestParam是针对非json的表单等路径,需了解
-------------------------------------------------------------------------------------------------------------------------
对于特殊的参数(Date时间格式的数据)可以直接传入
注意:需要传入的日期格式默认为:2023/3/22  斜线形式
->如果需要修改,则需要在日期形参的前面添加@DateTimeFormat(pattern="yyyy-MM-dd") "-"即为我们想传入的格式
-------------------------------------------------------------------------------------------------------------------------
                                                响应
->如果我们想要返回一个页面,我们可以直接在servlet里return "页面的名字"      //不加@Response注解
->如果我们想要返回json类型的数据,我们只需要直接return+名字就行了           //加@Response注解

   //@Response注解的作用就是将你写在return后面的数据转换成该servlet的返回值类型,真正将字符串转换成json格式的是jackson的类
      HttpMessageConverter接口完成的,不加该注解可以实现页面跳转
-------------------------------------------------------------------------------------------------------------------------
                                           REST风格->表现形式状态转换
概念:通俗一点就是改变我们传统写网址访问资源的格式

GET
传统格式:http://localhost/user/getById?id=1
REST格式:http://localhost/user/1

POST
传统格式:http://localhost/user/saveUser
REST格式:http://localhost/user

作用:1.隐藏资源的访问行为,无法通过地址得知资源在做何种操作
     2.简化书写

注意:既然是风格不是规范,说明是可以不遵守的,但是如今随着越来越多的公司使用,渐渐成为了一种约定

实现的思想:通过在servlet里定义不同的请求方式,达到相同的路径名可以访问到不同的servlet    增(Post)  删(Delete)  查(get)  改(put)
具体实现:
      1.如果controller类里全部都需要用@ResponsBody只需要统一使用@RestController即可代替(@controller和@ResponsBody)
      2.如果需要修改请求方式,只需要在对应的Servlet上添加GetMapping(例)即可,同时,如果该类都是对应同一个路径,直接在类上添加@RequestMapping("路径名")
      3.如果要传入参数,只需要在对应的Mapping("/{参数名}"),同时在参数前添加@PathVariable标签

-------------------------------------------------------------------------------------------------------------------------
                                           表现层与前端数据传输协议
问题:后端通过json传来的代码格式不一,前端需要遍历等繁琐的操作才能获取到对应的信息
解决方法:统一格式

原来的格式:(查询单条数据)                                            现在的格式:****
{                                                            {    //不同的code编码对应不同的操作(例如增删查改)
    "data":{                                                    "code":20041  //最后一位 1----成功   0-----失败
          "id":1,                                               "data":{               //现在一条数据对应一个"data"
          "type":"计算机理论",                                           "id":1,
          "name":"计算机组成原理"                                       "type":"计算机理论",
    }                                                                 "name":"计算机组成原理"
}                                                                   }
                                                                  "msg":"负责说明"data"的情况(比如查询失败)"
                                                              }

表现层数据封装
前后端已经协调好了双方之间的"通信协议",即(code,data,msg),作为后端程序员,我们则需要定义一个结果类统一我们的返回类
public class Result{
     private Object data;
     private Integer code;     //字段不是固定的,不同的公司不同的人定义的都不同
     private String msg;
}

根据需求,与前端沟通并定义好code编码,在service层创建code和msg对象,并填入Result的构造参数中


                                            异常处理器
程序开发时不可避免出现异常,例如如果查询操作出现异常,前端接收的则是一大堆报错信息
常见的异常:
->框架内部抛出的异常:因使用不合规导致
->数据层抛出的异常:因外部服务器故障导致(服务器超时等)
->业务层抛出的异常:因业务逻辑书写错误导致(遍历业务书写操作,导致索引异常等)
->表现层抛出的异常:因数据收集,校验等规则导致(不匹配的数据类型间导致的异常)
->工具类抛出的异常:因工具类书写不严谨不够简装导致(必要释放的连接长期未释放等)

解决方案:所有的异常均抛出到表现层进行处理------->问题:异常有很多种,解决方法也有很多种,都写在表现层会导致非常臃肿--->解决:AOP切面思想

    SpringMvc为我们提供了异常处理器(即@RestControllerAdvice注解),我们只需要在该处理器类里定义好需要被抛出的异常以及处理方式即可

项目常见的异常和解决方案:
  *业务异常                                             -------------发送对应消息传递给用户,提醒规范操作
    ->规范的用户行为产生的异常(输入了不正确的信息)
    ->不规范的用户行为操作产生的异常(要你输入数字你输入汉字)
  *系统异常
    ->项目运行中可预计且无法避免的异常        --------1.发送固定消息传递给用户,安抚用户 2.通知运维 3.记录日志
  *其他异常
    ->程序员未预期到的异常                  --------1.发送固定消息传递给用户,安抚用户 2.通知程序员进行维护 3.记录日志

具体实现和AOP差不多,有了异常处理器这个类后,我们只需要专门定义需要被拦截的异常类,里面提供对应的get/set方法,与此同时,在业务层也需要将遇到的异常
定义为自定义异常(当用户传入的数据不符合要求时,throw new BusinessException(Code.PROJECT_BUSSINESS_ERR,"请勿进行非法操作")

自定义异常(比如BusinessException)--------------切入点
异常处理器(ProjectExceptionAdvice)------------通知类

-------------------------------------------------------------------------------------------------------------------------
                                             拦截器
->是一种动态拦截方法调用的机制,在SpringMvc中动态拦截控制器方法的执行
作用:1.在指定方法调用前后执行需要的代码
    2.阻止原始方法的执行(权限控制)
                                         拦截器与过滤器的区别
        归属不同:过滤器属于Servlet技术,拦截器属于SpringMVC技术
        拦截内容不同:过滤器对所有访问进行增强,拦截器仅针对SpringMvc的访问(取决于容器加载类里定义的SpringMvc要拦截的内容)进行增强

具体实现:
    1.定义拦截器类,实现HandlerInterceptor接口,并添加@Component注解被SpringMvc自动加载
    2.在SpringMvcSupport里定义拦截器所要拦截的路径